s <- apply(d,2,function(x)gsub("United Kingdom","UK",x))
s
# Change names of some countries
s1 <- apply(d,2,function(x)gsub("\\s", "", x))
s1
s2 <- apply(s1,2,function(x)gsub("[[:punct:]\n]","",x))
s2
# Load world.cities data
data("world.cities")
# Pull country.etc from world.cities
r <- world.cities %>%
pull(country.etc)
r
# Change names of some countries
r <- gsub("Korea South","SouthKorea",r)
r <- gsub("Saudi Arabia","SaudiArabia",r)
r <- gsub("New Zealand","NewZealand",r)
r <- gsub("South Africa","SouthAfrica",r)
r <- gsub("Czech Republic", "CzechRepublic",r)
r <- gsub("Costa Rica", "CostaRica",r)
r <- gsub("Jersey", "USA",r)
r <- gsub("Bosnia and Herzegovina", "Bosnia",r)
r <- gsub("El Salvador", "ElSalvador",r)
r <- gsub("Ivory Coast", "IvoryCoast",r)
r <- gsub("Sri Lanka", "SriLanka",r)
r <- gsub("United Arab Emirates", "UAE",r)
r <- as_tibble(r)
s3 <- r$value[match(r$value,s2)]
s3 <- as_tibble(s3)
s3
d
View(d)
d.split(',', 1).last
sub(',[^,]*$', '', d)
de <- sub(".*,", "", d)
de
de <- as_tibble(de)
View(de)
de <- apply(d,2,function(x)gsub(".*,","",x)
de
de <- apply(d,2,function(x)gsub(".*,","",x)
de
de <- apply(d,2,function(x)gsub(",$","",x)
de
# Change names of some countries
s1 <- apply(d,2,function(x)gsub("\\s", "", x))
s
e1 <- apply(s,2,function(x)gsub("[[:punct:]\n]","", x))
e1
# Split data at word boundaries
f1 <- strsplit(e1, " ")
f1
# Pull country.etc from world.cities
r <- world.cities %>%
pull(country.etc)
# Change names of some countries
r <- gsub("Korea South","Southkorea",r)
r <- gsub("Saudi Arabia","Saudiarabia",r)
r <- gsub("New Zealand","Newzealand",r)
r <- gsub("South Africa","Southafrica",r)
r <- gsub("Czech Republic", "Czechrepublic",r)
r <- gsub("Costa Rica", "Costarica",r)
r <- gsub("Jersey", "USA",r)
r <- gsub("Bosnia and Herzegovina", "Bosnia",r)
r <- gsub("El Salvador", "ElSalvador",r)
r <- gsub("Ivory Coast", "IvoryCoast",r)
r <- gsub("Sri Lanka", "SriLanka",r)
r <- gsub("United Arab Emirates", "UAE",r)
r <- as_tibble(r)
s3 <- r$value[match(r$value,f1)]
s3 <- as_tibble(s3)
s3
View(s3)
# Detect number of cores
detectCores()
# Make cluster
cluster_1 <- makeCluster(3)
# Export needed data to every cluster
clusterExport(cluster_1,"r")
# Apply function
l <- clusterApply(cluster_1,f1,function(x)x[which(toupper(x) %in% toupper(r$value))])
# Stop cluster
stopCluster(cluster_1)
l
## Tidy outcome data
l1 <- do.call(rbind, lapply(l, as.data.frame))
l1
l2 <- as_tibble(l)
l
l2 <- unlist(l)
l3 <- as_tibble(l2)
View(l3)
View(l)
?unlist
l2 <- unlist(l,recursive = FALSE)
l3 <- as_tibble(l2)
l2 <- unlist(l,recursive = TRUE)
l2 <- unlist(l,use.names = FALSE)
l2 <- unlist(l,use.names = FALSE, recursive = FALSE)
l3 <- as_tibble(l2)
View(l)
l[sapply(l, is.null)] <- NA
l2 <- unlist(l)
l3 <- as_tibble(l2)
###sample script - country analysis####
library(tidyverse)
l3 <- as_tibble(l2)
View(l3)
l2 <- unlist(lapply(l,function(x) if(identical(x,character(0))) ' ' else x))
l3 <- as_tibble(l2)
View(l3)
c
d1 <- c %>%
distinct(address,.keep_all = TRUE)
View(d1)
d2 <- d1 %>%
select(-pmid,-doi, -title, -year,-month, - day)
View(d2)
d2 <- d1 %>%
pull(journal)
d2 <- as_tibble(d2)
View(d2)
d3 <- bind_cols(d2,l3)
View(l3)
l2 <- unlist(lapply(l,function(x) if(identical(x,character(0))) ' ' else x))
# Unlist and tidy
l
l2 <- unlist(lapply(l,function(x) if(identical(x,character(0))) ' ' else paste0(x,collapse=' ')))
l3 <- as_tibble(l2)
View(l3)
d3 <- bind_cols(d2,l3)
View(d3)
View(d3)
View(d3)
duplicated(d3$value1)
d4 <- d3$value1[!duplicated(d3$value1)]
d4
d4 <- d3[!duplicated(d3$value1)]
d4 <-paste(unique(d3$value1), collapse = ' ')
d4
###sample script - country analysis####
library(tidyverse)
d4 <- as_tibble(d4)
View(d4)
d4 <- sapply(strsplit(d3$value1, ","), function(x) paste(rle(x)$values, collapse=","))
d4 <- as_tibble(d4)
View(d4)
View(d3)
d4 <- sapply(strsplit(as.character(d3$value1), split=","), function(x) {
paste(unique(trimws(x)), collapse = ', ') } )
d4 <- as_tibble(d4)
View(d4)
d4 <- as_tibble(d4)
d4 <- sapply(strsplit(as.character(d3$value1), split=","), function(x) {
paste(unique(trimws(x)), collapse = ', ') } )
d4 <- as_tibble(d4)
View(d4)
View(raw_data_full)
View(d1)
View(d4)
d4 <- lapply(strsplit(d3$value1, "\\s+"), function(x) x[ave(x, x, FUN = length)==1L])
d4 <- as_tibble(d4)
d4 <- sapply(strsplit(as.character(d3$value1), split="\\s+"), function(x) {
paste(unique(trimws(x)), collapse = ', ') } )
d4 <- as_tibble(d4)
View(d4)
View(l3)
# Bind data again
d5 <- bind_cols(d2,d4)
View(d5)
sci_journal_13
sci_journal
# Check structure of the data
glimpse(sci_journal)
sci_journal_14
sci_journal_13
View(d4)
View(d2)
View(d2)
# Remove all data in parenthesis
q2 <- apply(d2,2,function(x)gsub("\\s*\\([^\\)]+\\)","",x))
# Remove all data after colon
q2 <- apply(q2,2,function(x)gsub(":.*","",x))
# Remove commas
q2 <- apply(q2,2,function(x)gsub(",","",x))
# Remove equal sign
q2 <- apply(q2,2,function(x)gsub("=","",x))
# Change &amp; to and
q2 <- apply(q2,2,function(x)gsub("&amp;", "and", x))
# Remove the from text
q2 <- apply(q2,2,function(x)gsub("the", "", x))
# Remove whitespace
q2 <- apply(q2,2,function(x)gsub('\\s+', '',x))
q2 <- apply(q2,2,function(x)gsub(' +',' ',x))
# Save as tibble
q2 <- as_tibble(q2)
View(q2)
View(q2)
# Remove punctuation from journal column and make tibble again
e2 <- q2$value %>%
removePunctuation()
library(tm)
# Remove punctuation from journal column and make tibble again
e2 <- q2$value %>%
removePunctuation()
e2
e2 <- as_tibble(e2)
e2
View(e2)
f2 <- e2 %>%
mutate(Title =tolower(Title))
View(e2)
glimpse(e2)
f2 <- e2 %>%
mutate(value =tolower(value))
View(f2)
View(f2)
# Bind columns
d6 <- bind_cols(f2,d4)
View(d6)
con_1 <- sci_journal_13$Categories[match(f2$value,sci_journal_13$Title)]
con_1 <- as_tibble(con_1)
View(con_1)
# Bind columns
d6 <- bind_cols(con_1,d4)
View(d6)
d7 <- d6 %>%
rename("Category"="value")
d7 <- d7 %>%
rename("Country"="value1")
View(d7)
d8 <- d7 %>%
group_by(Country) %>%
count(Category)
View(d8)
saveRDS(d7,"D:/Projekt_COVID/countries_categories_ready" )
install.packages("shiny")
library(shiny)
library(shiny)
ui <- fluidPage(textInput("name", "Enter a name:"), textOutput("q"))
server <- function(input, output) {
output$q <- renderText({paste("Do you prefer pizza or lasagne,",input$name, "?")})
}
View(server)
View(server)
View(ui)
shinyApp(ui=ui, server = server)
View(raw_data_full)
###sample script - country analysis####
library(tidyverse)
xd <- raw_data_full %>%
distinct(title,.keep_all = TRUE)
xd
xd <- as_tibble(xd)
View(xd)
source("https://bioconductor.org/biocLite.R")
version
library(shiny)
readyData_for_correlation_covid <- readRDS("C:/Users/Bartek/Dropbox/R/COVID-19 PubMed/Dane/readyData_for_correlation_covid.RDS")
View(readyData_for_correlation_covid)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
library(shiny)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
library(shiny)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
library(shiny); runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
library(shiny)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
shinyApp(ui=ui, server = server)
library(shiny)
shinyApp(ui=ui, server = server)
shinyApp(ui=ui, server = server)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
shinyApp(ui=ui, server = server)
shinyApp(ui= ui, server = server)
shinyApp(ui= ui, server = server)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
library(tidyverse)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("shinyWidgets")
library(shinyWidgets)
shinyWidgetsGallery()
install.packages("shinydasboard")
install.packages("shinydasboard")
shinyApp(ui= ui, server = server)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("shinyWidgets")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
shinyApp(ui= ui, server = server)
library(shiny); runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
shinyApp(ui= ui, server = server)
View(server)
library(shiny)
R.Version()
updateR()
installr: install.packages("installr")
installr:: install.packages("installr")
install.packages("installr")
library(installr)
updateR()
R.Version()
install.packages("shiny")
install.packages("tidyverse")
install.packages("installr")
library(shiny)
library(tidyverse)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(selectInput("country", "Select country", multiple = TRUE, unique(readyData_for_correlation_covid$Country)))
,
mainPanel(plotOutput("country")))
)
shinyApp(ui= ui, server = server)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("digest")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
library(reactable)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("reactable")
install.packages("reactable")
install.packages("reactable")
Sys.which("make")
install.packages("jsonlite", type = "source")
installed.packages("RISmed")
library(shiny); runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("reactable")
library(shiny); runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("ggplotly")
install.packages("plotly")
library(plotly)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("digest")
library(shiny)
library(tidyverse)
library(reactable)
library(plotly)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("reactable")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
ui <- fluidPage(
titlePanel("COVID-19 retrospective publication analyis"),
sidebarLayout(
sidebarPanel(selectInput("country", "Select country",multiple = TRUE, unique(readyData_for_correlation_covid$Country)))
,
mainPanel(tabsetPanel(tabPanel("Plot",
plotOutput("country")),tabPanel("Table",reactableOutput("table")))))
?plotly
)
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("plotly")
ui <- fluidPage(
titlePanel("COVID-19 retrospective publication analyis"),
sidebarLayout(
sidebarPanel(selectInput("country", "Select country",multiple = TRUE, unique(readyData_for_correlation_covid$Country)))
,
mainPanel(tabsetPanel(tabPanel("Plot",
plotOutput("country")),tabPanel("Table",reactableOutput("table")))))
?plotly
)
ui <- fluidPage(
titlePanel("COVID-19 retrospective publication analyis"),
sidebarLayout(
sidebarPanel(selectInput("country", "Select country",multiple = TRUE, unique(readyData_for_correlation_covid$Country)))
,
mainPanel(tabsetPanel(tabPanel("Plot",
plotOutput("country")),tabPanel("Table",reactableOutput("table")))))
?plotly
)
server <- function(input, output) {
zz <- reactive({subset(readyData_for_correlation_covid, Country %in% input$country)})
output$country <- renderPlot({ggplot(zz(),aes(x=Total_cases_perMln,y=Articles_perMln)) + geom_point()+ scale_y_log10()})
output$table <- renderReactable({reactable(zz())})
}
ui <- fluidPage(
titlePanel("COVID-19 retrospective publication analyis"),
sidebarLayout(
sidebarPanel(selectInput("country", "Select country",multiple = TRUE, unique(readyData_for_correlation_covid$Country)))
,
mainPanel(tabsetPanel(tabPanel("Plot",
plotOutput("country")),tabPanel("Table",reactableOutput("table")))))
?plotly
)
library(plotly)
ui <- fluidPage(
titlePanel("COVID-19 retrospective publication analyis"),
sidebarLayout(
sidebarPanel(selectInput("country", "Select country",multiple = TRUE, unique(readyData_for_correlation_covid$Country)))
,
mainPanel(tabsetPanel(tabPanel("Plot",
plotOutput("country")),tabPanel("Table",reactableOutput("table")))))
?plotly
)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("ggrepel")
install.packages("reactable")
install.packages("plotly")
install.packages("plotly")
install.packages("ggrepel")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
library(ggrepel)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("ggrepel")
library(shiny)
library(tidyverse)
library(reactable)
library(plotly)
library(ggrepel)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("ggrepel")
install.packages("reactable")
install.packages("plotly")
install.packages("ggrepel")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
library(shiny)
library(tidyverse)
library(reactable)
library(plotly)
library(ggrepel)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
