View(e2)
glimpse(e2)
f2 <- e2 %>%
mutate(value =tolower(value))
View(f2)
View(f2)
# Bind columns
d6 <- bind_cols(f2,d4)
View(d6)
con_1 <- sci_journal_13$Categories[match(f2$value,sci_journal_13$Title)]
con_1 <- as_tibble(con_1)
View(con_1)
# Bind columns
d6 <- bind_cols(con_1,d4)
View(d6)
d7 <- d6 %>%
rename("Category"="value")
d7 <- d7 %>%
rename("Country"="value1")
View(d7)
d8 <- d7 %>%
group_by(Country) %>%
count(Category)
View(d8)
saveRDS(d7,"D:/Projekt_COVID/countries_categories_ready" )
install.packages("shiny")
library(shiny)
library(shiny)
ui <- fluidPage(textInput("name", "Enter a name:"), textOutput("q"))
server <- function(input, output) {
output$q <- renderText({paste("Do you prefer pizza or lasagne,",input$name, "?")})
}
View(server)
View(server)
View(ui)
shinyApp(ui=ui, server = server)
View(raw_data_full)
###sample script - country analysis####
library(tidyverse)
xd <- raw_data_full %>%
distinct(title,.keep_all = TRUE)
xd
xd <- as_tibble(xd)
View(xd)
source("https://bioconductor.org/biocLite.R")
version
library(shiny)
readyData_for_correlation_covid <- readRDS("C:/Users/Bartek/Dropbox/R/COVID-19 PubMed/Dane/readyData_for_correlation_covid.RDS")
View(readyData_for_correlation_covid)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
library(shiny)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
library(shiny)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
library(shiny); runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
library(shiny)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
shinyApp(ui=ui, server = server)
library(shiny)
shinyApp(ui=ui, server = server)
shinyApp(ui=ui, server = server)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
shinyApp(ui=ui, server = server)
shinyApp(ui= ui, server = server)
shinyApp(ui= ui, server = server)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
library(tidyverse)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("shinyWidgets")
library(shinyWidgets)
shinyWidgetsGallery()
install.packages("shinydasboard")
install.packages("shinydasboard")
shinyApp(ui= ui, server = server)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("shinyWidgets")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
shinyApp(ui= ui, server = server)
library(shiny); runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
shinyApp(ui= ui, server = server)
View(server)
library(shiny)
R.Version()
updateR()
installr: install.packages("installr")
installr:: install.packages("installr")
install.packages("installr")
library(installr)
updateR()
R.Version()
install.packages("shiny")
install.packages("tidyverse")
install.packages("installr")
library(shiny)
library(tidyverse)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(selectInput("country", "Select country", multiple = TRUE, unique(readyData_for_correlation_covid$Country)))
,
mainPanel(plotOutput("country")))
)
shinyApp(ui= ui, server = server)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("digest")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
library(reactable)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("reactable")
install.packages("reactable")
install.packages("reactable")
Sys.which("make")
install.packages("jsonlite", type = "source")
installed.packages("RISmed")
library(shiny); runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("reactable")
library(shiny); runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("ggplotly")
install.packages("plotly")
library(plotly)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("digest")
library(shiny)
library(tidyverse)
library(reactable)
library(plotly)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("reactable")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
ui <- fluidPage(
titlePanel("COVID-19 retrospective publication analyis"),
sidebarLayout(
sidebarPanel(selectInput("country", "Select country",multiple = TRUE, unique(readyData_for_correlation_covid$Country)))
,
mainPanel(tabsetPanel(tabPanel("Plot",
plotOutput("country")),tabPanel("Table",reactableOutput("table")))))
?plotly
)
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("reactable")
install.packages("plotly")
install.packages("plotly")
ui <- fluidPage(
titlePanel("COVID-19 retrospective publication analyis"),
sidebarLayout(
sidebarPanel(selectInput("country", "Select country",multiple = TRUE, unique(readyData_for_correlation_covid$Country)))
,
mainPanel(tabsetPanel(tabPanel("Plot",
plotOutput("country")),tabPanel("Table",reactableOutput("table")))))
?plotly
)
ui <- fluidPage(
titlePanel("COVID-19 retrospective publication analyis"),
sidebarLayout(
sidebarPanel(selectInput("country", "Select country",multiple = TRUE, unique(readyData_for_correlation_covid$Country)))
,
mainPanel(tabsetPanel(tabPanel("Plot",
plotOutput("country")),tabPanel("Table",reactableOutput("table")))))
?plotly
)
server <- function(input, output) {
zz <- reactive({subset(readyData_for_correlation_covid, Country %in% input$country)})
output$country <- renderPlot({ggplot(zz(),aes(x=Total_cases_perMln,y=Articles_perMln)) + geom_point()+ scale_y_log10()})
output$table <- renderReactable({reactable(zz())})
}
ui <- fluidPage(
titlePanel("COVID-19 retrospective publication analyis"),
sidebarLayout(
sidebarPanel(selectInput("country", "Select country",multiple = TRUE, unique(readyData_for_correlation_covid$Country)))
,
mainPanel(tabsetPanel(tabPanel("Plot",
plotOutput("country")),tabPanel("Table",reactableOutput("table")))))
?plotly
)
library(plotly)
ui <- fluidPage(
titlePanel("COVID-19 retrospective publication analyis"),
sidebarLayout(
sidebarPanel(selectInput("country", "Select country",multiple = TRUE, unique(readyData_for_correlation_covid$Country)))
,
mainPanel(tabsetPanel(tabPanel("Plot",
plotOutput("country")),tabPanel("Table",reactableOutput("table")))))
?plotly
)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("ggrepel")
install.packages("reactable")
install.packages("plotly")
install.packages("plotly")
install.packages("ggrepel")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
library(ggrepel)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("ggrepel")
library(shiny)
library(tidyverse)
library(reactable)
library(plotly)
library(ggrepel)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("shiny")
install.packages("reactable")
install.packages("plotly")
install.packages("ggrepel")
install.packages("reactable")
install.packages("plotly")
install.packages("ggrepel")
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
library(shiny)
library(tidyverse)
library(reactable)
library(plotly)
library(ggrepel)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
library(shiny)
library(tidyverse)
library(reactable)
library(plotly)
library(ggrepel)
library(leaflet)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("wordcloud2")
library(wordcloud2)
library(c(shiny,tidyverse,reactable,plotly,ggrepel, leaflet, wordcloud2))
View(raw_data_full)
glimpse(raw_data_full)
output$cloud <- renderWordcloud2({raw_data_full$journal})
ui <- fluidPage(
titlePanel("COVID-19 retrospective publication analyis"),
sidebarLayout(
sidebarPanel(selectInput("country", "Select country",multiple = TRUE, unique(readyData_for_correlation_covid$Country)),
downloadButton("download","Download data"))
,
mainPanel(tabsetPanel(tabPanel("Plot-Total cases",
plotOutput("country")),tabPanel("Table",DT::dataTableOutput("table")),tabPanel("Map",leafletOutput(
"map", height = '500px', width = '100%')),tabPanel("Journals_cloud",wordcloud2Output(outputId = "cloud")))))
)
server <- function(input, output) {
zz <- reactive({subset(readyData_for_correlation_covid, Country %in% input$country)})
output$country <- renderPlot({ggplot(zz(),aes(x=Total_cases_perMln,y=Articles_perMln)) + geom_point()+ scale_y_log10() + geom_label_repel(aes(label = Country),
box.padding   = 0.5,
point.padding = 2.0,
segment.color = 'grey50') +
theme_classic() })
output$table <-DT::renderDataTable(zz())
output$download <- downloadHandler(
filename = "data.csv",
content = function(file) {
data <- zz()
write.csv(data, file, row.names = FALSE)
})
output$map <- renderLeaflet({
leaflet(zz()) %>%
setView( -98.58, 39.82, zoom = 5) %>%
addTiles()
})
output$cloud <- renderWordcloud2({raw_data_full$journal})
}
shinyApp(ui= ui, server = server)
output$cloud <- renderWordcloud2({raw_data_full[journal]})
server <- function(input, output) {
zz <- reactive({subset(readyData_for_correlation_covid, Country %in% input$country)})
output$country <- renderPlot({ggplot(zz(),aes(x=Total_cases_perMln,y=Articles_perMln)) + geom_point()+ scale_y_log10() + geom_label_repel(aes(label = Country),
box.padding   = 0.5,
point.padding = 2.0,
segment.color = 'grey50') +
theme_classic() })
output$table <-DT::renderDataTable(zz())
output$download <- downloadHandler(
filename = "data.csv",
content = function(file) {
data <- zz()
write.csv(data, file, row.names = FALSE)
})
output$map <- renderLeaflet({
leaflet(zz()) %>%
setView( -98.58, 39.82, zoom = 5) %>%
addTiles()
})
output$cloud <- renderWordcloud2({raw_data_full[journal]})
}
shinyApp(ui= ui, server = server)
xx <- as.data.frame(raw_data_full)
xx
output$cloud <- renderWordcloud2({xx$journal})
server <- function(input, output) {
zz <- reactive({subset(readyData_for_correlation_covid, Country %in% input$country)})
output$country <- renderPlot({ggplot(zz(),aes(x=Total_cases_perMln,y=Articles_perMln)) + geom_point()+ scale_y_log10() + geom_label_repel(aes(label = Country),
box.padding   = 0.5,
point.padding = 2.0,
segment.color = 'grey50') +
theme_classic() })
output$table <-DT::renderDataTable(zz())
output$download <- downloadHandler(
filename = "data.csv",
content = function(file) {
data <- zz()
write.csv(data, file, row.names = FALSE)
})
output$map <- renderLeaflet({
leaflet(zz()) %>%
setView( -98.58, 39.82, zoom = 5) %>%
addTiles()
})
output$cloud <- renderWordcloud2({xx$journal})
}
shinyApp(ui= ui, server = server)
output$cloud <- renderWordcloud2({raw_data_full[["journal"]]})
server <- function(input, output) {
zz <- reactive({subset(readyData_for_correlation_covid, Country %in% input$country)})
output$country <- renderPlot({ggplot(zz(),aes(x=Total_cases_perMln,y=Articles_perMln)) + geom_point()+ scale_y_log10() + geom_label_repel(aes(label = Country),
box.padding   = 0.5,
point.padding = 2.0,
segment.color = 'grey50') +
theme_classic() })
output$table <-DT::renderDataTable(zz())
output$download <- downloadHandler(
filename = "data.csv",
content = function(file) {
data <- zz()
write.csv(data, file, row.names = FALSE)
})
output$map <- renderLeaflet({
leaflet(zz()) %>%
setView( -98.58, 39.82, zoom = 5) %>%
addTiles()
})
output$cloud <- renderWordcloud2({raw_data_full[["journal"]]})
}
shinyApp(ui= ui, server = server)
xx <- raw_data_full %>%
pull(journal)
xx
xx <- raw_data_full %>%
unique(journal)
xx <- raw_data_full %>%
unique(journal)
xx <- raw_data_full %>%
distinct(journal)
xx
xx <- as.data.frame(xx)
glimpse(xx)
ui <- fluidPage(
titlePanel("COVID-19 retrospective publication analyis"),
sidebarLayout(
sidebarPanel(selectInput("country", "Select country",multiple = TRUE, unique(readyData_for_correlation_covid$Country)),
downloadButton("download","Download data"))
,
mainPanel(tabsetPanel(tabPanel("Plot-Total cases",
plotOutput("country")),tabPanel("Table",DT::dataTableOutput("table")),tabPanel("Map",leafletOutput(
"map", height = '500px', width = '100%')),tabPanel("Journals_cloud",wordcloud2Output(outputId = "cloud")))))
)
glimpse(xx)
output$cloud <- renderWordcloud2({xx})
server <- function(input, output) {
zz <- reactive({subset(readyData_for_correlation_covid, Country %in% input$country)})
output$country <- renderPlot({ggplot(zz(),aes(x=Total_cases_perMln,y=Articles_perMln)) + geom_point()+ scale_y_log10() + geom_label_repel(aes(label = Country),
box.padding   = 0.5,
point.padding = 2.0,
segment.color = 'grey50') +
theme_classic() })
output$table <-DT::renderDataTable(zz())
output$download <- downloadHandler(
filename = "data.csv",
content = function(file) {
data <- zz()
write.csv(data, file, row.names = FALSE)
})
output$map <- renderLeaflet({
leaflet(zz()) %>%
setView( -98.58, 39.82, zoom = 5) %>%
addTiles()
})
output$cloud <- renderWordcloud2({xx})
}
shinyApp(ui= ui, server = server)
glimpse(raw_data_full)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
install.packages("wordcloud")
library(wordcloud)
?wordcloud()
?wordcloud2()
?wordcloud()
install.packages("getTransformations")
library(wordcloud2)
if (is.character(xx)) {
data <- data.frame(word = names(xx), freq = as.numeric(xx))
}
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
library(wordcloud2)
?wordcloud2()
m
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
ui <- fluidPage(
titlePanel("COVID-19 retrospective publication analyis"),
sidebarLayout(
sidebarPanel(selectInput("country", "Select country",multiple = TRUE, unique(readyData_for_correlation_covid$Country)),
downloadButton("download","Download data"))
,
mainPanel(tabsetPanel(tabPanel("Plot-Total cases",
plotOutput("country")),tabPanel("Table",DT::dataTableOutput("table")),tabPanel("Map",leafletOutput(
"map", height = '500px', width = '100%')),tabPanel("Journals_cloud",wordcloud2Output(outputId = "cloud")))))
m
)
m
px
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
?wordcloud2()
px
px_1 <- as.data.frame(px)
px_1
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
library(wordcloud)
runApp('D:/Projekt_COVID/COVID_Pubmed/shiny_covid.R')
